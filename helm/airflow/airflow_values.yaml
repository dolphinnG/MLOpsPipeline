fullnameOverride: airflow-dolphin-service

# image:
#   registry: docker.io
#   # repository: supahakka/lightairflow
#   repository: supahakka/airflow-dolphin
#   tag: "1"
  # digest: "sha256:6f7eadda37b3d44275d00b0a7d5b60a277fe488850638873e4b963612217be09"
dags: 
  enabled: true
  repositories:
    - repository: https://dolphinnG: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@github.com/dolphinnG/airflowdag
      branch: main
      name: airflowdag
auth: 
  username: admin
  password: admin

redis: 
  enabled: false
  # master: 
  #   persistence: 
  #     enabled: false
  # auth:
  #   password: "redis_password"

externalRedis: 
  host: redis-dolphin-service-master
  port: 6379
  password: redis_password
    # {{- end }}  change redis to rediss in the helm/airflow/templates/_init_containers_sidecars.tpl file. It was hardcoded
    #   airflow_conf_set "celery" "broker_url" "rediss://${redis_credentials}@${REDIS_HOST}:${REDIS_PORT_NUMBER}/${REDIS_DATABASE}"
    # {{- end }}


postgresql: 
  enabled: false
  # auth: 
  #   password: "postgrespassword"

externalDatabase: 
  host: postgresql-dolphin-service
  port: 5432
  database: bitnami_airflow
  user: bn_airflow
  password: bn_airflow_password

# ingress:
#   enabled: true
#   tls: true
web: 
  tls: 
    enabled: true 
    autoGenerated:
      enabled: false
    existingSecret: airflow-tls-secret
# ----> Invalid request from ip=127.0.0.1: [SSL: SSLV3_ALERT_CERTIFICATE_UNKNOWN] sslv3 alert certificate unknown
# health check complains even though I already mounted the dolphin_trusted_CA_bundle into the pod's system trusted root certs
# probably because bitnami's health check doesn't rely on the system trusted root certs, but provided no way to configure it
# lame.


# extraEnvVars:
#   - name: AIRFLOW_REDIS_USE_SSL
#     value: "yes"

overrideConfiguration:
  # celery:
  #   broker_url: "rediss://:redis_password@redis-dolphin-service-master:6379/"
  #   result_backend: "db+postgresql://bn_airflow:bn_airflow_password@postgresql-dolphin-service:5432/bitnami_airflow"
  #   # worker_concurrency: 1
  #   # worker_log_server_port: 8793
  api: 
    auth_backends: "airflow.api.auth.backend.basic_auth"
    # auth_backend_kwargs: 
    #   username: "admin"
    #   password: "admin"

extraVolumes:
  - name: bundle-inject
    configMap:
      name: dolphin-trusted-ca-bundle
      items:
        - key: root-certs.pem
          path: ca-certificates.crt # must overwrite "/etc/ssl/certs/ca-certificates.crt" on debian

extraVolumeMounts:
  - name: bundle-inject
    mountPath: /etc/ssl/certs/
    readOnly: true



# not running torchx on dag, so this isn't needed, but even if it was, 
# should use the kubeconfig generation script from serviceAccount that
# i wrote rather than mounting the config from host to pod
# extraVolumeMounts:
#   - name: kube-cert-secret
#     mountPath: /opt/bitnami/airflow/dolphin
#     readOnly: true
#   - name: kube-config-file
#     mountPath: /opt/bitnami/airflow/.kube
#     readOnly: true
# extraVolumes:
#   - name: kube-cert-secret
#     secret:
#       secretName: kube-cert-secret
#   - name: kube-config-file
#     configMap:
#       name: kube-config-file



# this could work but needs x2 check.
# extraVolumeMounts:
#   - name: pipreq-volume
#     mountPath: /bitnami/python/requirements.txt
#     subPath: requirements.txt
# extraVolumes:
#   - name: pipreq-volume
#     configMap:
#       name: pipreq  



# defaultInitContainers: 
#   createDefaultConfig:
#     containerSecurityContext: 
#       enabled: true
#       runAsUser: 0
#       runAsGroup: 0
#       runAsNonRoot: false
#       privileged: false
#       allowPrivilegeEscalation: true
#       readOnlyRootFilesystem: false

# extraEnvVars: 
#   - name: KUBECONFIG
#     value: "/opt/bitnami/airflow/.kubze/config"

# web: 
#   automountServiceAccountToken: true
#   # containerSecurityContext:
#   #   runAsUser: 0
#   #   runAsGroup: 0
#   #   runAsNonRoot: false
#   #   privileged: false
#   #   allowPrivilegeEscalation: true
#   #   readOnlyRootFilesystem: false

# scheduler: 
#   automountServiceAccountToken: true
#   # containerSecurityContext:
#   #   runAsUser: 0
#   #   runAsGroup: 0
#   #   runAsNonRoot: false
#   #   privileged: false
#   #   allowPrivilegeEscalation: true
#   #   readOnlyRootFilesystem: false

# worker:
#   automountServiceAccountToken: true
#   # containerSecurityContext:
#   #   runAsUser: 0
  #   runAsGroup: 0
  #   runAsNonRoot: false
  #   privileged: false
  #   allowPrivilegeEscalation: true
  #   readOnlyRootFilesystem: false

# metrics: 
#   automountServiceAccountToken: true

# serviceAccount: 
#   create: true
#   name: airflow-sa
#   automountServiceAccountToken: true
#   rbac:
#     create: true
#     rules: 
#     - apiGroups: [""]
#       resources: ["secrets"]
#       verbs: ["get", "list"]